name: CI
on:
  pull_request:
  push:
    branches:
      - main
env:
  # FIREBASE_API_KEY: ${{ vars.FIREBASE_API_KEY }}
  # FIREBASE_AUTH_DOMAIN: ${{ vars.FIREBASE_AUTH_DOMAIN }}
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  RAILS_MASTER_KEY: ${{ vars.RAILS_MASTER_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: set up test db
        run: make test_db
      - name: set up test web
        run: make test_web && make test_bundle
      - name: set up test web asset
        run: make test_precompile
      - name: set up test migrate
        run: make test_migrate
      - name: run brakeman
        run: make test_brakeman
      - name: run rubocop
        run: make test_rubocop
      - name: run rspec
        run: make rspec
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build docker image
        run: docker build -f Dockerfile.prod --build-arg RAILS_MASTER_KEY=$RAILS_MASTER_KEY . -t suimi34/sandbox:prod && docker save suimi34/sandbox:prod > prod.tar

      - name: save docker image as tar
        uses: actions/upload-artifact@v4
        with:
          name: prod.tar
          path: ./prod.tar

  push:
    needs: build
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ vars.DOCKERHUB_TOKEN }}

      - name: load docker image
        uses: actions/download-artifact@v4
        with:
          name: prod.tar

      - name: push to docker hub
        run: docker load -i prod.tar && docker push suimi34/sandbox:prod

  # deploy:
  #   needs: push
  #   if: github.repository == 'suimi34/main'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Add SSH key
  #       env:
  #         SSH_KEY: ${{ secrets.SSH_KEY }}
  #       run: mkdir -p .ssh && chmod 700 .ssh && echo "$SSH_KEY" > .ssh/id_rsa && chmod 600 .ssh/id_rsa

  #     - name: Run deploy script
  #       run: ssh -l root -t -t -o "StrictHostKeyChecking=no" -i .ssh/id_rsa $HOST "sh deploy.sh"
  #       env:
  #         HOST: ${{ vars.HOST }}
